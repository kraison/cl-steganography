(in-package :cl-steganography)

(defvar *text-header*
  #2A((1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)
      (1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0)
      (0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1)))

(defun make-text-header (region-size)
  (let ((header (make-array (list region-size region-size)
                            :element-type 'bit
                            :initial-element 0)))
    (dotimes (x region-size)
      (dotimes (y region-size)
        (when (or (and (evenp x) (evenp y))
                  (and (oddp x) (oddp y)))
          (setf (aref header x y) 1))))
    header))
