(in-package :cl-steganography)

(defun encrypt-text (plaintext password)
  (let* ((iv (ironclad:ascii-string-to-byte-array password))
         (cipher (ironclad:make-cipher :blowfish  :mode :ecb  :key iv))
         (ciphertext (ironclad:ascii-string-to-byte-array plaintext)))
    (ironclad:encrypt cipher (ironclad:ascii-string-to-byte-array plaintext) ciphertext)
    ciphertext))

(defun decrypt-text (ciphertext password)
  (let* ((iv (ironclad:ascii-string-to-byte-array password))
         (cipher (ironclad:make-cipher :blowfish  :mode :ecb  :key iv))
         (plaintext (cl-utilities:copy-array ciphertext)))
    (ironclad:decrypt cipher ciphertext plaintext)
    (coerce (map 'list #'code-char plaintext) 'string)))

(defmethod encrypt-image ((image rgb-image) key)
  (let* ((iv (ironclad:ascii-string-to-byte-array key))
         (cipher (ironclad:make-cipher :blowfish :mode :ecb :key iv))
         (length (* (image-width image) (image-height image)))
         (red (make-array (list length) :element-type '(unsigned-byte 8)))
         (green (make-array (list length) :element-type '(unsigned-byte 8)))
         (blue (make-array (list length) :element-type '(unsigned-byte 8)))
         (index 0))
    (do-image-pixels (image color x y)
      (multiple-value-bind (r g b) (color-rgb color)
        (setf (aref red index) r)
        (setf (aref green index) g)
        (setf (aref blue index) b))
      (incf index))
    (ironclad:encrypt-in-place cipher red)
    (ironclad:encrypt-in-place cipher green)
    (ironclad:encrypt-in-place cipher blue)
    (let ((new-image (make-instance (class-of image)
                                    :width (image-width image)
                                    :height (image-height image))))
      (setq index 0)
      (copy new-image image)
      (do-image-pixels (new-image color x y)
        (setf color
              (make-color (aref red index)
                          (aref green index)
                          (aref blue index)))
        (incf index))
      new-image)))

(defmethod decrypt-image ((image rgb-image) key)
  (let* ((iv (ironclad:ascii-string-to-byte-array key))
         (cipher (ironclad:make-cipher :blowfish :mode :ecb :key iv))
         (length (* (image-width image) (image-height image)))
         (red (make-array (list length) :element-type '(unsigned-byte 8)))
         (green (make-array (list length) :element-type '(unsigned-byte 8)))
         (blue (make-array (list length) :element-type '(unsigned-byte 8)))
         (index 0))
    (do-image-pixels (image color x y)
      (multiple-value-bind (r g b) (color-rgb color)
        (setf (aref red index) r)
        (setf (aref green index) g)
        (setf (aref blue index) b))
      (incf index))
    (ironclad:decrypt-in-place cipher red)
    (ironclad:decrypt-in-place cipher green)
    (ironclad:decrypt-in-place cipher blue)
    (let ((new-image (make-instance (class-of image)
                                    :width (image-width image)
                                    :height (image-height image))))
      (setq index 0)
      (copy new-image image)
      (do-image-pixels (new-image color x y)
        (setf color
              (make-color (aref red index)
                          (aref green index)
                          (aref blue index)))
        (incf index))
      new-image)))

(defun encrypt-shifted-image (image key)
  (let* ((iv (ironclad:ascii-string-to-byte-array key))
         (cipher (ironclad:make-cipher :blowfish :mode :ecb :key iv))
         (length (floor (* (image-width image) (image-height image)) 2))
         (red (make-array (list length) :element-type '(unsigned-byte 8)
                          :initial-element 0))
         (green (make-array (list length) :element-type '(unsigned-byte 8)
                            :initial-element 0))
         (blue (make-array (list length) :element-type '(unsigned-byte 8)
                           :initial-element 0))
         (index 0) (switch 0))
    (do-image-pixels (image color x y)
      (multiple-value-bind (r g b) (color-rgb color)
        (if (evenp switch)
            (setf (aref red index)   (dpb r (byte 4 0) (aref red index))
                  (aref green index) (dpb g (byte 4 0) (aref green index))
                  (aref blue index)  (dpb b (byte 4 0) (aref blue index)))
            (setf (aref red index)   (dpb r (byte 4 4) (aref red index))
                  (aref green index) (dpb g (byte 4 4) (aref green index))
                  (aref blue index)  (dpb b (byte 4 4) (aref blue index))))
      (incf switch)
      (when (evenp switch)
        (incf index))))
    (ironclad:encrypt-in-place cipher red)
    (ironclad:encrypt-in-place cipher green)
    (ironclad:encrypt-in-place cipher blue)
    (let ((new-image (make-instance (class-of image)
                                    :width (image-width image)
                                    :height (image-height image))))
      (setq index 0 switch 0)
      (copy new-image image)
      (do-image-pixels (new-image color x y)
        (setf color
              (if (evenp switch)
                  (make-color (ldb (byte 4 0) (aref red index))
                              (ldb (byte 4 0) (aref green index))
                              (ldb (byte 4 0) (aref blue index)))
                  (make-color (ldb (byte 4 4) (aref red index))
                              (ldb (byte 4 4) (aref green index))
                              (ldb (byte 4 4) (aref blue index)))))
        (incf switch)
        (when (evenp switch)
          (incf index)))
      new-image)))

(defun decrypt-shifted-image (image key)
  (let* ((iv (ironclad:ascii-string-to-byte-array key))
         (cipher (ironclad:make-cipher :blowfish :mode :ecb :key iv))
         (length (floor (* (image-width image) (image-height image)) 2))
         (red (make-array (list length) :element-type '(unsigned-byte 8)))
         (green (make-array (list length) :element-type '(unsigned-byte 8)))
         (blue (make-array (list length) :element-type '(unsigned-byte 8)))
         (index 0) (switch 0))
      (do-image-pixels (image color x y)
        (multiple-value-bind (r g b) (color-rgb color)
          (if (evenp switch)
              (setf  (aref red index)   (dpb r (byte 4 0) 0)
                     (aref green index) (dpb g (byte 4 0) 0)
                     (aref blue index)  (dpb b (byte 4 0) 0))
              (setf  (aref red index)   (dpb r (byte 4 4) (aref red index))
                     (aref green index) (dpb g (byte 4 4) (aref green index))
                     (aref blue index)  (dpb b (byte 4 4) (aref blue index)))))
        (incf switch)
        (when (evenp switch)
          (incf index)))
    (ironclad:decrypt-in-place cipher red)
    (ironclad:decrypt-in-place cipher green)
    (ironclad:decrypt-in-place cipher blue)
    (let ((new-image (make-instance (class-of image)
                                    :width (image-width image)
                                    :height (image-height image))))
      (setq index 0 switch 0)
      (copy new-image image)
      (do-image-pixels (new-image color x y)
        (setf color
              (if (evenp switch)
                  (make-color (ldb (byte 4 0) (aref red index))
                              (ldb (byte 4 0) (aref green index))
                              (ldb (byte 4 0) (aref blue index)))
                  (make-color (ldb (byte 4 4) (aref red index))
                              (ldb (byte 4 4) (aref green index))
                              (ldb (byte 4 4) (aref blue index)))))
        (incf switch)
        (when (evenp switch)
          (incf index)))
      new-image)))

(defmethod encrypt-image ((image grayscale-image) key)
  (let* ((iv (ironclad:ascii-string-to-byte-array key))
         (cipher (ironclad:make-cipher :blowfish :mode :ecb :key iv))
         (length (* (image-width image) (image-height image)))
         (intensities (make-array (list length) :element-type '(unsigned-byte 8)))
         (index 0))
    (do-image-pixels (image intensity x y)
      (setf (aref intensities index) (gray-intensity intensity))
      (incf index))
    (ironclad:encrypt-in-place cipher intensities)
    (let ((new-image (make-instance (class-of image)
                                    :width (image-width image)
                                    :height (image-height image))))
      (setq index 0)
      (copy new-image image)
      (do-image-pixels (new-image intensity x y)
        (setf intensity
              (make-gray (aref intensities index)))
        (incf index))
      new-image)))

(defmethod decrypt-image ((image grayscale-image) key)
  (let* ((iv (ironclad:ascii-string-to-byte-array key))
         (cipher (ironclad:make-cipher :blowfish :mode :ecb :key iv))
         (length (* (image-width image) (image-height image)))
         (intensities (make-array (list length) :element-type '(unsigned-byte 8)))
         (index 0))
    (do-image-pixels (image intensity x y)
      (setf (aref intensities index) (gray-intensity intensity))
      (incf index))
    (ironclad:decrypt-in-place cipher intensities)
    (let ((new-image (make-instance (class-of image)
                                    :width (image-width image)
                                    :height (image-height image))))
      (setq index 0)
      (copy new-image image)
      (do-image-pixels (new-image intensity x y)
        (setf intensity
              (make-gray (aref intensities index)))
        (incf index))
      new-image)))
